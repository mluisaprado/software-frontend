name: Web CI/CD (Expo Web ‚Üí Netlify)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  # URL p√∫blica del backend Render (usada dentro del bundle Expo Web)
  EXPO_PUBLIC_API_URL: https://TU-BACKEND.onrender.com

jobs:
  # ========================================
  # STAGE 1: LINT
  # ========================================
  lint:
    name: üîç Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Node 18 + cache
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Instalar dependencias
        run: npm ci

      - name: Linter
        run: npm run lint || echo "No hay script de lint"

  # ========================================
  # STAGE 2: BUILD
  # ========================================
  build:
    name: üèóÔ∏è Build Web
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Node 18 + cache
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Instalar dependencias
        run: npm ci

      - name: Typecheck (opcional)
        run: npx tsc --noEmit || echo "Sin TypeScript o sin config"

      - name: Export web (Expo Web con Metro)
        run: npx expo export
        env:
          EXPO_PUBLIC_API_URL: ${{ env.EXPO_PUBLIC_API_URL }}

      - name: Publicar artefacto de build
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  # ========================================
  # STAGE 3: DEPLOY PROD (Netlify)
  # ========================================
  deploy:
    name: üöÄ Deploy a Netlify (Producci√≥n)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Restaurar artefacto dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # ‚úÖ Usa el action oficial correcto de Netlify CLI
      - name: Deploy con Netlify CLI
        uses: netlify/actions/cli@main
        with:
          args: deploy --dir=dist --prod
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # ========================================
  # STAGE 4: DEPLOY PREVIEW (Netlify)
  # ========================================
  deploy-preview:
    name: üîÅ Deploy Preview a Netlify (PR / Develop)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref != 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Restaurar artefacto dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Deploy preview con Netlify CLI
        uses: netlify/actions/cli@main
        with:
          args: deploy --dir=dist
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

